[package]
name = "rustaba"
version = "0.1.0"
authors = ["yokra9 <53964890+yokra9@users.noreply.github.com>"]
categories = ["wasm"]
readme = "README.md"
edition = "2018"

[lib]
crate-type = ["cdylib"]

[profile.release]
# これにより、コンパイルされたコードはより速く、より小さくなりますが、 コンパイルが遅くなります。
lto = true

[features]
# 次の行のコメントを解除すると小さなWasmファイルを生成します：
#default = ["wee_alloc"]
# 次の行のコメントを解除すると開発者ツールにRustのpanic messageが表示します：
#default = ["console_error_panic_hook"]

[dependencies]
# wasm-bindgen は、JavaScriptとの対話に必要な最低限の機能を提供します。
wasm-bindgen = "0.2.45"
scraper = "0.11.0"
regex = "1"
serde = { version = "1.0", features = ["derive"] }
serde_json = "1.0"
# wee_alloc は wasm 用の小さなアロケータで、デフォルトのアロケータの ~10K に比べて
# コードサイズは ~1K しかありません。しかし、デフォルトのアロケータよりも遅いので、
# デフォルトでは有効になっていません
wee_alloc = { version = "0.4.2", optional = true }
# console_error_panic_hook はパニックのログを console.error に表示することで、
# より良いデバッグを提供します。これは開発には最適ですが、std::fmt と std::panicking の
# インフラストラクチャをすべて必要とするので、デバッグモードでのみ有効になります。
console_error_panic_hook = { version = "0.1.5", optional = true }

# web-sys は DOM のような様々なブラウザAPIと対話することができます。
[dependencies.web-sys]
version = "0.3.22"
features = ["console"]

# これらのクレートはテストの実行に利用されます
[dev-dependencies]
wasm-bindgen-test = "0.2.45"
futures = "0.1.27"
js-sys = "0.3.22"
wasm-bindgen-futures = "0.3.22"
